resources:
  - name: gosvc_code
    type: GitRepo
    configuration:
      path: sdemo/go-service
      gitProvider: sdemo

  - name: gosvc_build
    type: BuildInfo
    configuration:
      sourceArtifactory: demo_art

  - name: gosvc_tested_build
    type: BuildInfo
    configuration:
      sourceArtifactory: demo_art

  - name: gosvc_promoted_build
    type: BuildInfo
    configuration:
      sourceArtifactory: demo_art

  - name: backend_code
    type: GitRepo
    configuration:
      path: sdemo/java-backend
      gitProvider: sdemo
      branches:
        include: ^master$

  - name: app_build
    type: BuildInfo
    configuration:
      sourceArtifactory: demo_art

  - name: app_tested_build
    type: BuildInfo
    configuration:
      sourceArtifactory: demo_art

  - name: app_promoted_build
    type: BuildInfo
    configuration:
      sourceArtifactory: demo_art

  - name: frontend_code
    type: GitRepo
    configuration:
      path: sdemo/vue-frontend
      gitProvider: sdemo
      branches:
        include: ^master$

  - name: app_release
    type: ReleaseBundle
    configuration:
      sourceDistribution: int_distribution
      name: app_rb
      version: v1.0.0

  - name: signed_app_release
    type: ReleaseBundle
    configuration:
      sourceDistribution: int_distribution
      name: app_rb
      version: v1.0.0

  - name: distribution_rules
    type: DistributionRule
    configuration:
      sourceDistribution: int_distribution
      serviceName: "*"
      siteName: "*"
      cityName: "*"
      countryCodes:
         - "*"
        # - "GB"
  #
  # - name: deploy_vm
  #   type: VmCluster
  #   configuration:
  #     sshKey: demo_ssh
  #     targets:
  #       - 130.211.121.141

pipelines:
  - name: gosvc_dev
    steps:
      - name: bld_svc
        type: DockerBuild
        configuration:
          affinityGroup: dockerbuild
          dockerFileLocation: .
          dockerFileName: Dockerfile
#           dockerImageName: avinci-docker-local.jfrog.io/gosvc
          dockerImageName: demo.jfrog-pipelines.com/pip-docker-dev-local/gosvc
          dockerImageTag: ${run_number}
          environmentVariables:
            JFROG_CLI_BUILD_NAME: gosvc_build
          inputResources:
            - name: gosvc_code
          integrations:
            - name: demo_art

      - name: push_svc
        type: DockerPush
        configuration:
          affinityGroup: dockerbuild
          targetRepository: pip-docker-dev-local
          forceXrayScan: true
          failOnScan: true
          autoPublishBuildInfo: true
          integrations:
            - name: demo_art
          inputSteps:
            - name: bld_svc
          outputResources:
            - name: gosvc_build

  - name: gosvc_test
    steps:
      - name: test_svc
        type: Bash
        configuration:
          inputResources:
            - name: gosvc_build
          outputResources:
            - name: gosvc_tested_build
        execution:
          onExecute:
            - echo "testing docker image"
            - replicate_resource gosvc_build gosvc_tested_build

      - name: promote_svc_build
        type: PromoteBuild
        configuration:
          targetRepository: pip-docker-test-local
          integrations:
            - name: demo_art
          inputResources:
            - name: gosvc_tested_build
          outputResources:
            - name: gosvc_promoted_build

  - name: app_dev
    configuration:
      environmentVariables:
        readOnly:
          JFROG_CLI_BUILD_NAME: app_build
    steps:
      - name: bld_backend
        type: MvnBuild
        configuration:
          sourceLocation: .
          mvnCommand: clean install -ntp
          configFileLocation: .
          configFileName: mvn-art-config
          inputResources:
            - name: backend_code
          integrations:
            - name: demo_art
          runtime:
            type: image
            image:
              auto:
                language: java
                versions:
                  - "11"
        execution:
          onStart:
            - javac -version
            - mvn --version

      - name: bld_frontend
        type: NpmBuild
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - "14"
          affinityGroup: npmBuild
          npmArgs: --no-progress --no-audit
          sourceLocation: .
          repositoryName: pip-npm-virtual
          inputResources:
            - name: frontend_code
          integrations:
            - name: demo_art
        execution:
          onComplete:
            - cp -r $res_frontend_code_resourcePath $shared_workspace
            - rm -rf $steplet_run_state_dir/npmBuildInputGitRepo

      - name: pblsh_frontend
        type: Bash
        configuration:
          runtime:
            type: image
            image:
              auto:
                language: node
                versions:
                  - "14"
          affinityGroup: npmBuild
          inputSteps:
            - name: bld_frontend
          integrations:
            - name: demo_art
        execution:
          onStart:
      #      - export tempStateLocation="$step_tmp_dir/npmSourceState"
      #      - restore_run_files npmBuildInputGitRepo $tempStateLocation
            - pushd $shared_workspace/frontend_code
            - npm run build
      #      - add_run_files $tempStateLocation/. npmBuildInputGitRepo
            - jfrog rt npm-config --repo-deploy pip-npm-dev-local --server-id-deploy demo_art
            - jfrog rt npm-publish --detailed-summary

      #
      # - name: publish_frontend
      #   type: NpmPublish
      #   configuration:
      #     affinityGroup: npmBuild
      #     repositoryName: pip-npm-dev-local
      #     inputSteps:
      #       - name: pack_frontend
      #     integrations:
      #       - name: demo_art
      #   execution:
      #     onStart:
      #       - export inputNpmBuildStepName="bld_frontend"

      - name: build_app
        type: Bash
        configuration:
          environmentVariables:
#             dockerImageName: avinci-docker-local.jfrog.io/app
            dockerImageName: demo.jfrog-pipelines.com/pip-docker-dev-local/app
            dockerImageTag: ${run_number}
          inputResources:
            - name: backend_code
              trigger: false
          inputSteps:
            - name: bld_backend
            - name: pblsh_frontend
          integrations:
            - name: demo_art
        execution:
          onStart:
            - rm -rf $run_dir/workspace/jfrog
            - retry_command jfrog rt config --url $int_demo_art_url --user $int_demo_art_user --apikey $int_demo_art_apikey --interactive=false
            - pushd $res_backend_code_resourcePath
            - add_run_variables buildStepName=${step_name}
            - add_run_variables ${step_name}_buildNumber=${run_number}
            - add_run_variables ${step_name}_buildName=${pipeline_name}
            - docker build --pull --no-cache -t $dockerImageName:$dockerImageTag --build-arg REGISTRY=${int_demo_art_url} .
            - jfrog rt bce $pipeline_name $run_number
            - jfrog rt docker-push $dockerImageName:$dockerImageTag pip-docker-dev-local --build-name=$pipeline_name --build-number=$run_number
            - add_run_files /tmp/jfrog/. jfrog

      - name: publish_app_build
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: build_app
          outputResources:
            - name: app_build
#
#       - name: promote_app_build
#         type: PromoteBuild
#         configuration:
#           targetRepository: docker
#           integrations:
#             - name: demo_art
#           inputResources:
#             - name: appl_build_info
#           outputResources:
#             - name: appl_promoted_build_info

  - name: app_test
    steps:
      - name: test_app
        type: Bash
        configuration:
          inputResources:
            - name: app_build
          outputResources:
            - name: app_tested_build
        execution:
          onExecute:
            - echo "testing docker image"
            - replicate_resource app_build app_tested_build

      - name: promote_app_build
        type: PromoteBuild
        configuration:
          targetRepository: pip-docker-test-local
          integrations:
            - name: demo_art
          inputResources:
            - name: app_tested_build
          outputResources:
            - name: app_promoted_build

  - name: release_application
    steps:
      - name: create_app_bundle
        type: CreateReleaseBundle
        configuration:
          releaseBundleName: app_rb
          releaseBundleVersion: v1.0.${run_number}
          dryRun: false
          sign: false
          description: "some random test description"
          inputResources:
            - name: gosvc_promoted_build
              trigger: false
            - name: app_promoted_build
              trigger: false
          outputResources:
            - name: app_release
          releaseNotes:
            syntax: markdown
            content: |
              ## Heading
                * Bullet
                * Points

      - name: sign_app_bundle
        type: SignReleaseBundle
        configuration:
          inputResources:
            - name: app_release
          outputResources:
            - name: signed_app_release

      - name: distribute_app_bundle
        type: DistributeReleaseBundle
        configuration:
          dryRun: false
          inputResources:
            - name: signed_app_release
            - name: distribution_rules
#
#       - name: deploy
#         type: Bash
#         configuration:
#           environmentVariables:
#             docker_repository: docker
#             artifactory_address: 35.222.179.206:8082
#           integrations:
#             - name: edge_art
#           inputResources:
#             - name: deploy_vm
#             - name: gosvc_promoted_build_info
#               trigger: false
#             - name: appl_promoted_build_info
#               trigger: false
#           inputSteps:
#             - name: distribute
#         execution:
#           onExecute:
#             - ssh -i ~/.ssh/deploy_vm sdemo@${res_deploy_vm_targets_0} sudo /home/sdemo/deploy-to-prod-test.sh $artifactory_address $docker_repository $int_edge_art_apikey $res_appl_promoted_build_info_buildNumber $res_gosvc_promoted_build_info_buildNumber
